;;;; ==========================================================================
;;;; @title Ether Multisend
;;;; @author Noel Maersk <veox>
;;;; TODO: use REVERT

(seq
  (include "./common.lll.inc")

  ;; ==========================================================================
  ;; MEMORY LAYOUT

  (def '*memloc-counter* 0x60)
  (def '*memloc-to-ptr*  0x80) ; `_to[]` pointer to calldata location
  (def '*memloc-amt-ptr* 0xa0) ; `_amt[]` pointer to calldata location

  ;; ==========================================================================
  ;; CONSTANTS

  (def '*funcsel-send-many* 0x80862479) ; sendMany(address[],uint256[])
  (def '*maxgas* 30000)                 ; max gas allowed per message

  ;; ==========================================================================
  ;; INIT

  unpayable

  ;; ==========================================================================
  ;; CODE

  (returnlll
   (seq
     ;; wasteful, compliant: must specify 4-byte web3 function
     (unless (= calldata-function-selector *funcsel-send-many*) (revert 0 0))
     ;; data size (sans selector) must be a multiple of 64 (32+32) bytes
     (unless (= (% (- (calldatasize) 4) 64) 0) (revert 0 0))

     ;; don't proceed if not enough data for at least one (to,amt) pair
     (when (< (calldatasize) 196) (return 0 0))

     ;; in call data, 0x04 contains pointer to `_to[]` data, where the 0th
     ;; element is its length; 0x24 contains pointer to `_amt[]` data, where
     ;; the 0th element is also its length; the lengths should be equal

     ;; store pointers to length-elements (for now)
     (mstore *memloc-to-ptr* (calldataload 0x04))
     (mstore *memloc-amt-ptr* (calldataload 0x24))

     ;; `_to[]` and `_amt[]` lengths must match
     (unless (= (calldataload (+ (mload *memloc-to-ptr*) 0x04))
                (calldataload (+ (mload *memloc-amt-ptr*) 0x04)))
       (revert 0 0))

     ;; start from right off the end of arrays
     (mstore *memloc-counter* (calldataload (+ (mload *memloc-to-ptr*)
                                               0x04))) ; friggin' funcsel...

     ;; ;; DEBUG
     ;; (log1 *memloc-counter* 0x20 0x1337)
     ;; (log1 *memloc-scratchpad* 0x20 0x1337)
     ;; (log1 *memloc-to-ptr* 0x20 0x1337)
     ;; (log1 *memloc-amt-ptr* 0x20 0x1337)

     ;; LOOP through arrays in reverse
     (while
      (mload *memloc-counter*) ;; last processed array member is not 0th
      (seq
        ;; calculate offset
        (mstore *memloc-scratchpad*
                (+ (* (mload *memloc-counter*) 0x20)
                   0x04)) ; friggin' funcsel...

        (send *maxgas*
              ;; to
              (calldataload (+ (mload *memloc-to-ptr*)
                               (mload *memloc-scratchpad*)))
              ;; value
              (calldataload (+ (mload *memloc-amt-ptr*)
                               (mload *memloc-scratchpad*))))

        ;; DEBUG
        (mstore 0x100 (calldataload (+ (mload *memloc-to-ptr*)
                                       (mload *memloc-scratchpad*))))
        (log1 0x100 0x20 0x42)
        (mstore 0x100 (calldataload (+ (mload *memloc-amt-ptr*)
                                       (mload *memloc-scratchpad*))))
        (log1 0x100 0x20 0x42)

        ;; decrement counter
        (mstore *memloc-counter* (- (mload *memloc-counter*) 1))))
     (return 0 0))))
